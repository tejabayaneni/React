{"ast":null,"code":"\"use strict\";\n\nvar Renderer = require('./renderer');\n\nvar reUnsafeProtocol = /^javascript:|vbscript:|file:|data:/i;\nvar reSafeDataProtocol = /^data:image\\/(?:png|gif|jpeg|webp)/i;\n\nvar potentiallyUnsafe = function potentiallyUnsafe(url) {\n  return reUnsafeProtocol.test(url) && !reSafeDataProtocol.test(url);\n}; // Helper function to produce an HTML tag.\n\n\nfunction tag(name, attrs, selfclosing) {\n  if (this.disableTags > 0) {\n    return;\n  }\n\n  this.buffer += '<' + name;\n\n  if (attrs && attrs.length > 0) {\n    var i = 0;\n    var attrib;\n\n    while ((attrib = attrs[i]) !== undefined) {\n      this.buffer += ' ' + attrib[0] + '=\"' + attrib[1] + '\"';\n      i++;\n    }\n  }\n\n  if (selfclosing) {\n    this.buffer += ' /';\n  }\n\n  this.buffer += '>';\n  this.lastOut = '>';\n}\n\nfunction HtmlRenderer(options) {\n  options = options || {}; // by default, soft breaks are rendered as newlines in HTML\n\n  options.softbreak = options.softbreak || '\\n'; // set to \"<br />\" to make them hard breaks\n  // set to \" \" if you want to ignore line wrapping in source\n\n  this.disableTags = 0;\n  this.lastOut = \"\\n\";\n  this.options = options;\n}\n/* Node methods */\n\n\nfunction text(node) {\n  this.out(node.literal);\n}\n\nfunction softbreak() {\n  this.lit(this.options.softbreak);\n}\n\nfunction linebreak() {\n  this.tag('br', [], true);\n  this.cr();\n}\n\nfunction link(node, entering) {\n  var attrs = this.attrs(node);\n\n  if (entering) {\n    if (!(this.options.safe && potentiallyUnsafe(node.destination))) {\n      attrs.push(['href', this.esc(node.destination, true)]);\n    }\n\n    if (node.title) {\n      attrs.push(['title', this.esc(node.title, true)]);\n    }\n\n    this.tag('a', attrs);\n  } else {\n    this.tag('/a');\n  }\n}\n\nfunction image(node, entering) {\n  if (entering) {\n    if (this.disableTags === 0) {\n      if (this.options.safe && potentiallyUnsafe(node.destination)) {\n        this.lit('<img src=\"\" alt=\"');\n      } else {\n        this.lit('<img src=\"' + this.esc(node.destination, true) + '\" alt=\"');\n      }\n    }\n\n    this.disableTags += 1;\n  } else {\n    this.disableTags -= 1;\n\n    if (this.disableTags === 0) {\n      if (node.title) {\n        this.lit('\" title=\"' + this.esc(node.title, true));\n      }\n\n      this.lit('\" />');\n    }\n  }\n}\n\nfunction emph(node, entering) {\n  this.tag(entering ? 'em' : '/em');\n}\n\nfunction strong(node, entering) {\n  this.tag(entering ? 'strong' : '/strong');\n}\n\nfunction paragraph(node, entering) {\n  var grandparent = node.parent.parent,\n      attrs = this.attrs(node);\n\n  if (grandparent !== null && grandparent.type === 'list') {\n    if (grandparent.listTight) {\n      return;\n    }\n  }\n\n  if (entering) {\n    this.cr();\n    this.tag('p', attrs);\n  } else {\n    this.tag('/p');\n    this.cr();\n  }\n}\n\nfunction heading(node, entering) {\n  var tagname = 'h' + node.level,\n      attrs = this.attrs(node);\n\n  if (entering) {\n    this.cr();\n    this.tag(tagname, attrs);\n  } else {\n    this.tag('/' + tagname);\n    this.cr();\n  }\n}\n\nfunction code(node) {\n  this.tag('code');\n  this.out(node.literal);\n  this.tag('/code');\n}\n\nfunction code_block(node) {\n  var info_words = node.info ? node.info.split(/\\s+/) : [],\n      attrs = this.attrs(node);\n\n  if (info_words.length > 0 && info_words[0].length > 0) {\n    attrs.push(['class', 'language-' + this.esc(info_words[0], true)]);\n  }\n\n  this.cr();\n  this.tag('pre');\n  this.tag('code', attrs);\n  this.out(node.literal);\n  this.tag('/code');\n  this.tag('/pre');\n  this.cr();\n}\n\nfunction thematic_break(node) {\n  var attrs = this.attrs(node);\n  this.cr();\n  this.tag('hr', attrs, true);\n  this.cr();\n}\n\nfunction block_quote(node, entering) {\n  var attrs = this.attrs(node);\n\n  if (entering) {\n    this.cr();\n    this.tag('blockquote', attrs);\n    this.cr();\n  } else {\n    this.cr();\n    this.tag('/blockquote');\n    this.cr();\n  }\n}\n\nfunction list(node, entering) {\n  var tagname = node.listType === 'bullet' ? 'ul' : 'ol',\n      attrs = this.attrs(node);\n\n  if (entering) {\n    var start = node.listStart;\n\n    if (start !== null && start !== 1) {\n      attrs.push(['start', start.toString()]);\n    }\n\n    this.cr();\n    this.tag(tagname, attrs);\n    this.cr();\n  } else {\n    this.cr();\n    this.tag('/' + tagname);\n    this.cr();\n  }\n}\n\nfunction item(node, entering) {\n  var attrs = this.attrs(node);\n\n  if (entering) {\n    this.tag('li', attrs);\n  } else {\n    this.tag('/li');\n    this.cr();\n  }\n}\n\nfunction html_inline(node) {\n  if (this.options.safe) {\n    this.lit('<!-- raw HTML omitted -->');\n  } else {\n    this.lit(node.literal);\n  }\n}\n\nfunction html_block(node) {\n  this.cr();\n\n  if (this.options.safe) {\n    this.lit('<!-- raw HTML omitted -->');\n  } else {\n    this.lit(node.literal);\n  }\n\n  this.cr();\n}\n\nfunction custom_inline(node, entering) {\n  if (entering && node.onEnter) {\n    this.lit(node.onEnter);\n  } else if (!entering && node.onExit) {\n    this.lit(node.onExit);\n  }\n}\n\nfunction custom_block(node, entering) {\n  this.cr();\n\n  if (entering && node.onEnter) {\n    this.lit(node.onEnter);\n  } else if (!entering && node.onExit) {\n    this.lit(node.onExit);\n  }\n\n  this.cr();\n}\n/* Helper methods */\n\n\nfunction out(s) {\n  this.lit(this.esc(s, false));\n}\n\nfunction attrs(node) {\n  var att = [];\n\n  if (this.options.sourcepos) {\n    var pos = node.sourcepos;\n\n    if (pos) {\n      att.push(['data-sourcepos', String(pos[0][0]) + ':' + String(pos[0][1]) + '-' + String(pos[1][0]) + ':' + String(pos[1][1])]);\n    }\n  }\n\n  return att;\n} // quick browser-compatible inheritance\n\n\nHtmlRenderer.prototype = Object.create(Renderer.prototype);\nHtmlRenderer.prototype.text = text;\nHtmlRenderer.prototype.html_inline = html_inline;\nHtmlRenderer.prototype.html_block = html_block;\nHtmlRenderer.prototype.softbreak = softbreak;\nHtmlRenderer.prototype.linebreak = linebreak;\nHtmlRenderer.prototype.link = link;\nHtmlRenderer.prototype.image = image;\nHtmlRenderer.prototype.emph = emph;\nHtmlRenderer.prototype.strong = strong;\nHtmlRenderer.prototype.paragraph = paragraph;\nHtmlRenderer.prototype.heading = heading;\nHtmlRenderer.prototype.code = code;\nHtmlRenderer.prototype.code_block = code_block;\nHtmlRenderer.prototype.thematic_break = thematic_break;\nHtmlRenderer.prototype.block_quote = block_quote;\nHtmlRenderer.prototype.list = list;\nHtmlRenderer.prototype.item = item;\nHtmlRenderer.prototype.custom_inline = custom_inline;\nHtmlRenderer.prototype.custom_block = custom_block;\nHtmlRenderer.prototype.esc = require('../common').escapeXml;\nHtmlRenderer.prototype.out = out;\nHtmlRenderer.prototype.tag = tag;\nHtmlRenderer.prototype.attrs = attrs;\nmodule.exports = HtmlRenderer;","map":null,"metadata":{},"sourceType":"script"}