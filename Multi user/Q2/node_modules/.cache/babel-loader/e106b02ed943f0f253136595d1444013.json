{"ast":null,"code":"import _defineProperty from \"/var/www/html/myapp/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/var/www/html/myapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/myapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/var/www/html/myapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/var/www/html/myapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/var/www/html/myapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/var/www/html/myapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/var/www/html/myapp/src/App.js\";\nimport React, { Component } from 'react';\nimport sampleTasks from './tasks1.json';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Container, Row, Col, ButtonGroup, Button, ListGroup } from 'react-bootstrap';\nimport ViewPanel from './ViewPanel.js';\nimport ActionPanel from './ActionPanel.js'; //import classnames from 'classnames';\n//import Prism from 'prismjs';\n\nimport \"./prism.css\"; //import { HtmlRenderer, Parser } from 'commonmark';\n\nimport { //Container,Row,Col,Jumbotron,\nTabContent, TabPane, Nav, NavItem, NavLink, Dropdown, DropdownItem, DropdownToggle, DropdownMenu, Alert, Progress, //ButtonGroup,Button,\nForm, FormGroup, Label, Input } from 'reactstrap';\nimport 'whatwg-fetch';\nimport config from './config.js';\nimport moment from 'moment';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      //tasks:sampleTasks,\n      curTask: 0,\n      mode: \"view\",\n      activeTab: 0,\n      tasks: [],\n      loadingTasks: false,\n      addForm: false,\n      error: '',\n      success: false,\n      deleteError: '',\n      deleteSuccess: false,\n      taskName: '',\n      dueDate: '',\n      dueTime: '00:00',\n      status: 'Open',\n      instructions: '',\n      editMode: false\n    };\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.showAddForm = _this.showAddForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //Prism.highlightAll();\n      this.setState({\n        loadingTasks: true\n      }); // let url = config.API_URL+'tasks';\n      // fetch(url,{}).then(res => res.json())\n      // .then(json => {\n      //   //console.log('enter',json);\n      //   this.setState({\n      //     tasks: json.tasks,\n      //     loadingTasks:false\n      //   });\n      // }, error =>{\n      //   this.setState({ \n      //     loadingTasks:false,\n      //     error: 'Network error!'  \n      //   });\n      //   console.log('err',error);\n      // });\n    }\n  }, {\n    key: \"taskClick\",\n    value: function taskClick(i) {\n      var curIns = this.state.tasks[this.state.curTask].instructions;\n      this.setState({\n        curTask: i\n      });\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(tab) {\n      if (this.state.activeTab !== tab) {\n        this.setState({\n          activeTab: tab\n        });\n      }\n    }\n  }, {\n    key: \"showAddForm\",\n    value: function showAddForm() {\n      this.setState({\n        addForm: !this.state.addForm,\n        editMode: false,\n        taskName: '',\n        dueDate: '',\n        dueTime: '00:00',\n        status: 'Open',\n        instructions: ''\n      });\n    }\n  }, {\n    key: \"openEditModal\",\n    value: function openEditModal(data) {\n      var dueDate = moment(data.due).utc().format('YYYY-MM-DD');\n      var dueTime = moment(data.due).utc().format('HH:mm');\n      this.setState({\n        addForm: !this.state.addForm,\n        editMode: true,\n        taskName: data[\"task-name\"],\n        status: data.status,\n        dueDate: dueDate,\n        dueTime: dueTime,\n        instructions: data.instructions\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(evt) {\n      this.setState(_defineProperty({}, evt.target.name, evt.target.value));\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      var _this2 = this;\n\n      event.preventDefault();\n      var method = 'POST';\n      var url = config.API_URL + 'tasks/';\n\n      if (this.state.editMode) {\n        method = 'PUT';\n        url = config.API_URL + 'tasks/' + this.state.taskName;\n      }\n\n      this.setState({\n        error: '',\n        success: false\n      });\n      fetch(url, {\n        method: method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'task-name': this.state.taskName,\n          'due': this.state.dueDate + 'T' + this.state.dueTime + ':00.000Z',\n          //+' '+this.state.dueTime,\n          'status': this.state.status,\n          'instructions': this.state.instructions\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        console.log('res', json);\n\n        if (json.error !== undefined && json.error !== '') {\n          console.log('error', json.error);\n\n          _this2.setState({\n            error: json.error\n          });\n        } else if (json._id !== undefined && json._id !== '') {\n          var elements = _this2.state.tasks.slice();\n\n          if (!_this2.state.editMode) {\n            elements.push({\n              'task-name': _this2.state.taskName,\n              'due': _this2.state.dueDate + 'T' + _this2.state.dueTime + ':00.000Z',\n              'status': _this2.state.status,\n              'instructions': _this2.state.instructions\n            });\n          } else {\n            // this.state.tasks.map(task => {\n            //     if(task[\"task-name\"] === this.state.taskName) {\n            //         //console.log('enter');\n            //         return (\n            //               { \n            //               \"task-name\": this.state.taskName,\n            //               due: this.state.dueDate+'T'+this.state.dueTime+':00.000Z',\n            //               status: this.state.status,\n            //               instructions: this.state.instructions\n            //             }\n            //         )\n            //     }\n            // });\n            var ele = _this2.state.tasks.filter(function (task) {\n              return _this2.state.taskName !== task[\"task-name\"];\n            });\n\n            ele.push({\n              \"task-name\": _this2.state.taskName,\n              due: _this2.state.dueDate + 'T' + _this2.state.dueTime + ':00.000Z',\n              status: _this2.state.status,\n              instructions: _this2.state.instructions\n            });\n            elements = ele;\n            console.log(_this2.state.tasks);\n          }\n\n          _this2.setState({\n            success: true,\n            addForm: false,\n            tasks: elements\n          });\n        } else {\n          _this2.setState({\n            error: 'Request Error!'\n          });\n        }\n      }, function (error) {\n        // this.setState({\n        //   error: error  \n        // });\n        console.log('err', error);\n\n        _this2.setState({\n          error: 'Network error!'\n        });\n      });\n    }\n  }, {\n    key: \"handleDelete\",\n    value: function handleDelete(data) {\n      var _this3 = this;\n\n      console.log(data);\n      var method = 'DELETE';\n      var url = config.API_URL + 'tasks/' + data[\"task-name\"];\n      this.setState({\n        error: '',\n        success: false\n      });\n      fetch(url, {\n        method: method,\n        headers: {\n          'Content-Type': 'application/json'\n        } //body: JSON.stringify({ }) \n\n      }).then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        if (json.success) {\n          var tasks = _this3.state.tasks.filter(function (task) {\n            return data[\"task-name\"] !== task[\"task-name\"];\n          });\n\n          _this3.setState(function (state) {\n            state.tasks = tasks;\n            state.deleteSuccess = true;\n            return state;\n          });\n        } else {\n          _this3.setState({\n            deleteError: 'Request Error!'\n          });\n        }\n      }, function (error) {\n        // this.setState({\n        //   error: error  \n        // });\n        console.log('err', error);\n\n        _this3.setState({\n          deleteError: 'Network error!'\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //let curTask = this.state.tasks[this.state.activeTab];\n      //let curIns = this.state.tasks[this.state.activeTab].instructions;\n      var that = this;\n      var listItems = this.state.tasks.map(function (item, i) {\n        if (i === that.state.curTask) {\n          return React.createElement(ListGroup.Item, {\n            key: i,\n            active: true,\n            action: true,\n            onClick: that.taskClick.bind(that, i),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 266\n            },\n            __self: this\n          }, item[\"task-name\"]);\n        } else {\n          return React.createElement(ListGroup.Item, {\n            key: i,\n            action: true,\n            onClick: that.taskClick.bind(that, i),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 277\n            },\n            __self: this\n          }, item[\"task-name\"]);\n        } // return(\n        //   <NavItem key={i}>\n        //     <NavLink\n        //       className={classnames({ active: that.state.activeTab === i })}\n        //       onClick={() => { that.toggle(i); }}\n        //     >\n        //       {item[\"task-name\"]}\n        //     </NavLink>\n        //   </NavItem>\n        // );\n\n      }); // let parser = new Parser()\n      // let renderer = new HtmlRenderer()\n      // let currentIns = renderer.render(parser.parse(this.state.instructions));\n      // let synHtml = Prism.highlight(currentIns, Prism.languages.markup, 'markup');\n      // let listTabs=this.state.tasks.map(function(item,i){\n      //   let ins = renderer.render(parser.parse(item.instructions));\n      //   let active = '';\n      //   if(i===that.state.activeTab){\n      //     active = 'active';\n      //   }else{\n      //     active = '';\n      //   }\n      //   let dueDate = moment(item.due).utc().format('dddd, MMMM Do YYYY, hh:mm A');\n      //   return(\n      //     <TabContent key={i} vertical activeTab=\"{this.state.activeTab}\">\n      //     <TabPane tabId=\"{i}\" className={active}>\n      //       <Row>\n      //         <Col sm=\"12\">\n      //         <pre>\n      //         <code >\n      //         {/* {curTask.instructions} */}\n      //         <div dangerouslySetInnerHTML={{__html: ins}}></div>\n      //         </code>\n      //         </pre>\n      //         Status: {item.status}, Due: {dueDate}\n      //           {/* <h4>{curTask.instructions}</h4> */}\n      //         </Col>\n      //         <Col sm=\"12\">\n      //           <ButtonGroup>\n      //             <Button color=\"primary\" onClick={() => { that.showAddForm(); }}>Add</Button>\n      //             <Button color=\"primary\" onClick={that.openEditModal.bind(that, item)}>Update</Button>\n      //             <Button color=\"primary\" onClick={that.handleDelete.bind(that, item)}>Delete</Button>\n      //           </ButtonGroup>\n      //         </Col>\n      //       </Row>\n      //     </TabPane>\n      //     </TabContent>\n      // );\n      //})\n\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, \"Title here\")), this.state.success && React.createElement(Alert, {\n        color: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }, \"Successfully Added\"), this.state.deleteError !== '' && React.createElement(Alert, {\n        color: \"warning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, \"Error: \", this.state.deleteError), this.state.deleteSuccess && React.createElement(Alert, {\n        color: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      }, \"Successfully Deleted\"), this.state.addForm ? React.createElement(ActionPanel, {\n        state: this.state,\n        instructions: this.state.instructions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, listItems && listItems.length == 0 && React.createElement(Col, {\n        sm: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }, this.state.error !== '' ? React.createElement(Alert, {\n        color: \"danger\",\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }, this.state.error) : React.createElement(Alert, {\n        color: \"warning\",\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }, \"No results found\"), React.createElement(Button, {\n        color: \"primary\",\n        onClick: function onClick() {\n          that.showAddForm();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }, \"Add\")), listItems && listItems.length > 0 && React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }, React.createElement(Nav, {\n        vertical: true,\n        pills: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      }, listItems)), React.createElement(Col, {\n        sm: \"9\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      }, React.createElement(ViewPanel, {\n        tasks: this.state.sampleTasks,\n        curTask: this.state.curTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/var/www/html/myapp/src/App.js"],"names":["React","Component","sampleTasks","Container","Row","Col","ButtonGroup","Button","ListGroup","ViewPanel","ActionPanel","TabContent","TabPane","Nav","NavItem","NavLink","Dropdown","DropdownItem","DropdownToggle","DropdownMenu","Alert","Progress","Form","FormGroup","Label","Input","config","moment","App","props","state","curTask","mode","activeTab","tasks","loadingTasks","addForm","error","success","deleteError","deleteSuccess","taskName","dueDate","dueTime","status","instructions","editMode","toggle","bind","showAddForm","handleChange","handleSubmit","setState","i","curIns","tab","data","due","utc","format","evt","target","name","value","event","preventDefault","method","url","API_URL","fetch","headers","body","JSON","stringify","then","res","json","console","log","undefined","_id","elements","slice","push","ele","filter","task","that","listItems","map","item","taskClick","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport sampleTasks from './tasks1.json';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Container,Row,Col,ButtonGroup,Button,ListGroup } from 'react-bootstrap';\nimport ViewPanel from './ViewPanel.js'\nimport ActionPanel from './ActionPanel.js'\n\n//import classnames from 'classnames';\n//import Prism from 'prismjs';\nimport \"./prism.css\";\n//import { HtmlRenderer, Parser } from 'commonmark';\nimport { \n    //Container,Row,Col,Jumbotron,\n    TabContent, TabPane,Nav, NavItem, NavLink,\n    Dropdown, DropdownItem, DropdownToggle, DropdownMenu, \n    Alert,Progress,\n    //ButtonGroup,Button,\n    Form, FormGroup, Label, Input,\n} from 'reactstrap';\nimport 'whatwg-fetch';\nimport config from './config.js';\nimport moment from 'moment';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state={\n      //tasks:sampleTasks,\n      curTask:0,\n      mode:\"view\",\n      activeTab: 0,\n      tasks:[],\n      loadingTasks: false,\n      addForm:false,\n      error:'',\n      success:false,\n      deleteError:'',\n      deleteSuccess:false,\n      taskName:'',\n      dueDate:'',\n      dueTime:'00:00',\n      status:'Open',\n      instructions:'',\n      editMode:false\n    }\n    \n    this.toggle = this.toggle.bind(this);\n    this.showAddForm = this.showAddForm.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    \n  }\n\n  componentDidMount() {\n    //Prism.highlightAll();\n    \n    this.setState({ loadingTasks:true});\n\n    // let url = config.API_URL+'tasks';\n    // fetch(url,{}).then(res => res.json())\n    // .then(json => {\n    //   //console.log('enter',json);\n    //   this.setState({\n    //     tasks: json.tasks,\n    //     loadingTasks:false\n    //   });\n    // }, error =>{\n    //   this.setState({ \n    //     loadingTasks:false,\n    //     error: 'Network error!'  \n    //   });\n    //   console.log('err',error);\n    // });\n  }\n\n  taskClick(i){\n    let curIns =this.state.tasks[this.state.curTask].instructions;\n    this.setState(\n      {\n        curTask:i\n      });\n  }\n\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab\n      });\n    }\n  }\n  \n  showAddForm(){\n    this.setState({\n      addForm: !this.state.addForm,\n      editMode:false,\n      taskName:'',\n      dueDate:'',\n      dueTime:'00:00',\n      status:'Open',\n      instructions:'',\n    });\n  }\n\n  openEditModal (data) {\n    let dueDate = moment(data.due).utc().format('YYYY-MM-DD');\n    let dueTime = moment(data.due).utc().format('HH:mm');\n    \n    this.setState({\n       addForm: !this.state.addForm,\n       editMode:true,\n       taskName:data[\"task-name\"],\n       status:data.status,\n       dueDate:dueDate,\n       dueTime:dueTime,\n       instructions:data.instructions\n    });\n  }  \n\n  handleChange (evt) {\n    this.setState({ [evt.target.name]: evt.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();  \n    let method = 'POST';\n    let url = config.API_URL+'tasks/';\n    if(this.state.editMode){\n      method = 'PUT';\n      url = config.API_URL+'tasks/'+this.state.taskName;\n    }\n    \n    this.setState({\n      error: '',\n      success:false\n    });  \n    fetch(url, { \n        method: method,\n        headers: {'Content-Type':'application/json'},\n        body: JSON.stringify({\n          'task-name': this.state.taskName,\n          'due': this.state.dueDate+'T'+this.state.dueTime+':00.000Z',\n          //+' '+this.state.dueTime,\n          'status': this.state.status,\n          'instructions': this.state.instructions,\n        }) \n    })\n    .then(res => res.json())\n    .then(json => {\n      console.log('res',json);\n      if(json.error !== undefined && json.error !== ''){\n        console.log('error',json.error);\n        this.setState({\n          error: json.error  \n        });  \n      }\n      else if(json._id !== undefined && json._id !== ''){\n        let elements = this.state.tasks.slice();\n        if(!this.state.editMode){\n          elements.push({\n            'task-name': this.state.taskName,\n            'due': this.state.dueDate+'T'+this.state.dueTime+':00.000Z',\n            'status': this.state.status,\n            'instructions': this.state.instructions\n          });\n        }else{\n            \n          // this.state.tasks.map(task => {\n          //     if(task[\"task-name\"] === this.state.taskName) {\n          //         //console.log('enter');\n          //         return (\n          //               { \n          //               \"task-name\": this.state.taskName,\n          //               due: this.state.dueDate+'T'+this.state.dueTime+':00.000Z',\n          //               status: this.state.status,\n          //               instructions: this.state.instructions\n          //             }\n          //         )\n          //     }\n          // });\n          let ele = this.state.tasks.filter((task) => {\n            return this.state.taskName !== task[\"task-name\"];\n          });  \n          ele.push({ \n            \"task-name\": this.state.taskName,\n            due: this.state.dueDate+'T'+this.state.dueTime+':00.000Z',\n            status: this.state.status,\n            instructions: this.state.instructions\n          })\n          elements = ele;\n          console.log(this.state.tasks);\n        }  \n        this.setState({\n          success: true,\n          addForm:false,\n          tasks:elements\n        });\n      }\n      else{\n        this.setState({\n          error: 'Request Error!'\n        });  \n      }\n    }, error =>{\n      // this.setState({\n      //   error: error  \n      // });\n      console.log('err',error);\n      this.setState({\n        error: 'Network error!'\n      });\n    });\n  }\n\n  handleDelete(data) {\n    console.log(data);\n    let method = 'DELETE';\n    let url = config.API_URL+'tasks/'+data[\"task-name\"];\n    \n    this.setState({\n      error: '',\n      success:false\n    });  \n    fetch(url, { \n        method: method,\n        headers: {'Content-Type':'application/json'},\n        //body: JSON.stringify({ }) \n    })\n    .then(res => res.json())\n    .then(json => {\n      if(json.success){\n        let tasks = this.state.tasks.filter((task) => {\n          return data[\"task-name\"] !== task[\"task-name\"];\n        });\n      \n        this.setState(state => {\n            state.tasks = tasks;\n            state.deleteSuccess= true;\n            return state;\n        });\n      }\n      else{\n        this.setState({\n          deleteError: 'Request Error!'\n        });  \n      }\n    }, error =>{\n      // this.setState({\n      //   error: error  \n      // });\n      console.log('err',error);\n      this.setState({\n        deleteError: 'Network error!'\n      });\n    });\n  }\n\n  render() {\n    //let curTask = this.state.tasks[this.state.activeTab];\n    //let curIns = this.state.tasks[this.state.activeTab].instructions;\n    let that=this;\n    let listItems=this.state.tasks.map(function(item,i){\n      if(i===that.state.curTask){\n        return(\n        <ListGroup.Item\n        key={i}\n        active\n        action\n        onClick={that.taskClick.bind(that,i)}\n        >\n        {item[\"task-name\"]}\n        </ListGroup.Item>\n      );\n    }else{\n      return(\n      <ListGroup.Item key={i} action onClick={that.taskClick.bind(that,i)}>\n      {item[\"task-name\"]}\n      </ListGroup.Item>\n    );\n      } \n      // return(\n      //   <NavItem key={i}>\n      //     <NavLink\n      //       className={classnames({ active: that.state.activeTab === i })}\n      //       onClick={() => { that.toggle(i); }}\n      //     >\n      //       {item[\"task-name\"]}\n      //     </NavLink>\n      //   </NavItem>\n      // );\n    })\n    \n    // let parser = new Parser()\n    // let renderer = new HtmlRenderer()\n    \n    // let currentIns = renderer.render(parser.parse(this.state.instructions));\n    // let synHtml = Prism.highlight(currentIns, Prism.languages.markup, 'markup');\n\n    // let listTabs=this.state.tasks.map(function(item,i){\n    //   let ins = renderer.render(parser.parse(item.instructions));\n    //   let active = '';\n    //   if(i===that.state.activeTab){\n    //     active = 'active';\n    //   }else{\n    //     active = '';\n    //   }\n    //   let dueDate = moment(item.due).utc().format('dddd, MMMM Do YYYY, hh:mm A');\n      \n    //   return(\n    //     <TabContent key={i} vertical activeTab=\"{this.state.activeTab}\">\n    //     <TabPane tabId=\"{i}\" className={active}>\n    //       <Row>\n    //         <Col sm=\"12\">\n    //         <pre>\n    //         <code >\n    //         {/* {curTask.instructions} */}\n    //         <div dangerouslySetInnerHTML={{__html: ins}}></div>\n    //         </code>\n    //         </pre>\n    //         Status: {item.status}, Due: {dueDate}\n            \n    //           {/* <h4>{curTask.instructions}</h4> */}\n    //         </Col>\n    //         <Col sm=\"12\">\n    //           <ButtonGroup>\n    //             <Button color=\"primary\" onClick={() => { that.showAddForm(); }}>Add</Button>\n    //             <Button color=\"primary\" onClick={that.openEditModal.bind(that, item)}>Update</Button>\n    //             <Button color=\"primary\" onClick={that.handleDelete.bind(that, item)}>Delete</Button>\n    //           </ButtonGroup>\n    //         </Col>\n    //       </Row>\n    //     </TabPane>\n    //     </TabContent>\n    // );\n  //})\n\n    return(\n        <Container>\n          <Container><h1 className=\"text-center\">Title here</h1></Container>\n          {this.state.success && <Alert color=\"success\">Successfully Added</Alert>} \n          {this.state.deleteError !== '' && <Alert color=\"warning\">Error: {this.state.deleteError}</Alert>}\n          {this.state.deleteSuccess && <Alert color=\"success\">Successfully Deleted</Alert>}  \n\n          { this.state.addForm ?\n          <ActionPanel state={this.state} instructions={this.state.instructions} />\n          :\n           \n          <div>\n          {/* { this.state.loadingTasks && \n            <Progress animated color=\"warning\" value=\"100\" />\n          }\n          */}\n          { listItems && listItems.length == 0 &&\n            <Col sm=\"12\">\n            {this.state.error !== '' ?\n              <Alert color=\"danger\" className=\"text-center\">{this.state.error}</Alert>\n              :\n              <Alert color=\"warning\" className=\"text-center\">No results found</Alert>\n            }\n            \n            <Button color=\"primary\" onClick={() => { that.showAddForm(); }}>Add</Button>\n            </Col>\n          }\n\n          { listItems && listItems.length > 0 &&\n            <Row>\n            <Col sm=\"3\">\n              <Nav vertical pills>\n                {listItems}\n              </Nav>\n            </Col>\n            <Col sm=\"9\">\n              <ViewPanel tasks={this.state.sampleTasks} curTask={this.state.curTask} />\n              {/* <Jumbotron>\n                {listTabs}\n              </Jumbotron> */}\n            </Col>\n            </Row>}\n            </div>\n          }\n        </Container>\n\n        \n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}