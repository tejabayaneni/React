{"ast":null,"code":"\"use strict\";\n\nvar Renderer = require('./renderer');\n\nvar reXMLTag = /\\<[^>]*\\>/;\n\nfunction toTagName(s) {\n  return s.replace(/([a-z])([A-Z])/g, \"$1_$2\").toLowerCase();\n}\n\nfunction XmlRenderer(options) {\n  options = options || {};\n  this.disableTags = 0;\n  this.lastOut = \"\\n\";\n  this.indentLevel = 0;\n  this.indent = '  ';\n  this.options = options;\n}\n\nfunction render(ast) {\n  this.buffer = '';\n  var attrs;\n  var tagname;\n  var walker = ast.walker();\n  var event, node, entering;\n  var container;\n  var selfClosing;\n  var nodetype;\n  var options = this.options;\n\n  if (options.time) {\n    console.time(\"rendering\");\n  }\n\n  this.buffer += '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n';\n  this.buffer += '<!DOCTYPE document SYSTEM \"CommonMark.dtd\">\\n';\n\n  while (event = walker.next()) {\n    entering = event.entering;\n    node = event.node;\n    nodetype = node.type;\n    container = node.isContainer;\n    selfClosing = nodetype === 'thematic_break' || nodetype === 'linebreak' || nodetype === 'softbreak';\n    tagname = toTagName(nodetype);\n\n    if (entering) {\n      attrs = [];\n\n      switch (nodetype) {\n        case 'document':\n          attrs.push(['xmlns', 'http://commonmark.org/xml/1.0']);\n          break;\n\n        case 'list':\n          if (node.listType !== null) {\n            attrs.push(['type', node.listType.toLowerCase()]);\n          }\n\n          if (node.listStart !== null) {\n            attrs.push(['start', String(node.listStart)]);\n          }\n\n          if (node.listTight !== null) {\n            attrs.push(['tight', node.listTight ? 'true' : 'false']);\n          }\n\n          var delim = node.listDelimiter;\n\n          if (delim !== null) {\n            var delimword = '';\n\n            if (delim === '.') {\n              delimword = 'period';\n            } else {\n              delimword = 'paren';\n            }\n\n            attrs.push(['delimiter', delimword]);\n          }\n\n          break;\n\n        case 'code_block':\n          if (node.info) {\n            attrs.push(['info', node.info]);\n          }\n\n          break;\n\n        case 'heading':\n          attrs.push(['level', String(node.level)]);\n          break;\n\n        case 'link':\n        case 'image':\n          attrs.push(['destination', node.destination]);\n          attrs.push(['title', node.title]);\n          break;\n\n        case 'custom_inline':\n        case 'custom_block':\n          attrs.push(['on_enter', node.onEnter]);\n          attrs.push(['on_exit', node.onExit]);\n          break;\n\n        default:\n          break;\n      }\n\n      if (options.sourcepos) {\n        var pos = node.sourcepos;\n\n        if (pos) {\n          attrs.push(['sourcepos', String(pos[0][0]) + ':' + String(pos[0][1]) + '-' + String(pos[1][0]) + ':' + String(pos[1][1])]);\n        }\n      }\n\n      this.cr();\n      this.out(this.tag(tagname, attrs, selfClosing));\n\n      if (container) {\n        this.indentLevel += 1;\n      } else if (!container && !selfClosing) {\n        var lit = node.literal;\n\n        if (lit) {\n          this.out(this.esc(lit));\n        }\n\n        this.out(this.tag('/' + tagname));\n      }\n    } else {\n      this.indentLevel -= 1;\n      this.cr();\n      this.out(this.tag('/' + tagname));\n    }\n  }\n\n  if (options.time) {\n    console.timeEnd(\"rendering\");\n  }\n\n  this.buffer += '\\n';\n  return this.buffer;\n}\n\nfunction out(s) {\n  if (this.disableTags > 0) {\n    this.buffer += s.replace(reXMLTag, '');\n  } else {\n    this.buffer += s;\n  }\n\n  this.lastOut = s;\n}\n\nfunction cr() {\n  if (this.lastOut !== '\\n') {\n    this.buffer += '\\n';\n    this.lastOut = '\\n';\n\n    for (var i = this.indentLevel; i > 0; i--) {\n      this.buffer += this.indent;\n    }\n  }\n} // Helper function to produce an XML tag.\n\n\nfunction tag(name, attrs, selfclosing) {\n  var result = '<' + name;\n\n  if (attrs && attrs.length > 0) {\n    var i = 0;\n    var attrib;\n\n    while ((attrib = attrs[i]) !== undefined) {\n      result += ' ' + attrib[0] + '=\"' + this.esc(attrib[1]) + '\"';\n      i++;\n    }\n  }\n\n  if (selfclosing) {\n    result += ' /';\n  }\n\n  result += '>';\n  return result;\n} // quick browser-compatible inheritance\n\n\nXmlRenderer.prototype = Object.create(Renderer.prototype);\nXmlRenderer.prototype.render = render;\nXmlRenderer.prototype.out = out;\nXmlRenderer.prototype.cr = cr;\nXmlRenderer.prototype.tag = tag;\nXmlRenderer.prototype.esc = require('../common').escapeXml;\nmodule.exports = XmlRenderer;","map":null,"metadata":{},"sourceType":"script"}