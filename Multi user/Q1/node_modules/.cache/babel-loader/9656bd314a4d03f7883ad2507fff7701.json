{"ast":null,"code":"\"use strict\";\n\nvar encode = require('mdurl/encode');\n\nvar decode = require('mdurl/decode');\n\nvar C_BACKSLASH = 92;\n\nvar decodeHTML = require('entities').decodeHTML;\n\nvar ENTITY = \"&(?:#x[a-f0-9]{1,8}|#[0-9]{1,8}|[a-z][a-z0-9]{1,31});\";\nvar TAGNAME = '[A-Za-z][A-Za-z0-9-]*';\nvar ATTRIBUTENAME = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\nvar UNQUOTEDVALUE = \"[^\\\"'=<>`\\\\x00-\\\\x20]+\";\nvar SINGLEQUOTEDVALUE = \"'[^']*'\";\nvar DOUBLEQUOTEDVALUE = '\"[^\"]*\"';\nvar ATTRIBUTEVALUE = \"(?:\" + UNQUOTEDVALUE + \"|\" + SINGLEQUOTEDVALUE + \"|\" + DOUBLEQUOTEDVALUE + \")\";\nvar ATTRIBUTEVALUESPEC = \"(?:\" + \"\\\\s*=\" + \"\\\\s*\" + ATTRIBUTEVALUE + \")\";\nvar ATTRIBUTE = \"(?:\" + \"\\\\s+\" + ATTRIBUTENAME + ATTRIBUTEVALUESPEC + \"?)\";\nvar OPENTAG = \"<\" + TAGNAME + ATTRIBUTE + \"*\" + \"\\\\s*/?>\";\nvar CLOSETAG = \"</\" + TAGNAME + \"\\\\s*[>]\";\nvar HTMLCOMMENT = \"<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->\";\nvar PROCESSINGINSTRUCTION = \"[<][?].*?[?][>]\";\nvar DECLARATION = \"<![A-Z]+\" + \"\\\\s+[^>]*>\";\nvar CDATA = \"<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\";\nvar HTMLTAG = \"(?:\" + OPENTAG + \"|\" + CLOSETAG + \"|\" + HTMLCOMMENT + \"|\" + PROCESSINGINSTRUCTION + \"|\" + DECLARATION + \"|\" + CDATA + \")\";\nvar reHtmlTag = new RegExp('^' + HTMLTAG, 'i');\nvar reBackslashOrAmp = /[\\\\&]/;\nvar ESCAPABLE = '[!\"#$%&\\'()*+,./:;<=>?@[\\\\\\\\\\\\]^_`{|}~-]';\nvar reEntityOrEscapedChar = new RegExp('\\\\\\\\' + ESCAPABLE + '|' + ENTITY, 'gi');\nvar XMLSPECIAL = '[&<>\"]';\nvar reXmlSpecial = new RegExp(XMLSPECIAL, 'g');\nvar reXmlSpecialOrEntity = new RegExp(ENTITY + '|' + XMLSPECIAL, 'gi');\n\nvar unescapeChar = function unescapeChar(s) {\n  if (s.charCodeAt(0) === C_BACKSLASH) {\n    return s.charAt(1);\n  } else {\n    return decodeHTML(s);\n  }\n}; // Replace entities and backslash escapes with literal characters.\n\n\nvar unescapeString = function unescapeString(s) {\n  if (reBackslashOrAmp.test(s)) {\n    return s.replace(reEntityOrEscapedChar, unescapeChar);\n  } else {\n    return s;\n  }\n};\n\nvar normalizeURI = function normalizeURI(uri) {\n  try {\n    return encode(decode(uri));\n  } catch (err) {\n    return uri;\n  }\n};\n\nvar replaceUnsafeChar = function replaceUnsafeChar(s) {\n  switch (s) {\n    case '&':\n      return '&amp;';\n\n    case '<':\n      return '&lt;';\n\n    case '>':\n      return '&gt;';\n\n    case '\"':\n      return '&quot;';\n\n    default:\n      return s;\n  }\n};\n\nvar escapeXml = function escapeXml(s, preserve_entities) {\n  if (reXmlSpecial.test(s)) {\n    if (preserve_entities) {\n      return s.replace(reXmlSpecialOrEntity, replaceUnsafeChar);\n    } else {\n      return s.replace(reXmlSpecial, replaceUnsafeChar);\n    }\n  } else {\n    return s;\n  }\n};\n\nmodule.exports = {\n  unescapeString: unescapeString,\n  normalizeURI: normalizeURI,\n  escapeXml: escapeXml,\n  reHtmlTag: reHtmlTag,\n  OPENTAG: OPENTAG,\n  CLOSETAG: CLOSETAG,\n  ENTITY: ENTITY,\n  ESCAPABLE: ESCAPABLE\n};","map":null,"metadata":{},"sourceType":"script"}