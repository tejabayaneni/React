{"ast":null,"code":"\"use strict\";\n\nvar Node = require('./node');\n\nvar common = require('./common');\n\nvar normalizeReference = require('./normalize-reference');\n\nvar normalizeURI = common.normalizeURI;\nvar unescapeString = common.unescapeString;\n\nvar fromCodePoint = require('./from-code-point.js');\n\nvar decodeHTML = require('entities').decodeHTML;\n\nrequire('string.prototype.repeat'); // Polyfill for String.prototype.repeat\n// Constants for character codes:\n\n\nvar C_NEWLINE = 10;\nvar C_ASTERISK = 42;\nvar C_UNDERSCORE = 95;\nvar C_BACKTICK = 96;\nvar C_OPEN_BRACKET = 91;\nvar C_CLOSE_BRACKET = 93;\nvar C_LESSTHAN = 60;\nvar C_BANG = 33;\nvar C_BACKSLASH = 92;\nvar C_AMPERSAND = 38;\nvar C_OPEN_PAREN = 40;\nvar C_CLOSE_PAREN = 41;\nvar C_COLON = 58;\nvar C_SINGLEQUOTE = 39;\nvar C_DOUBLEQUOTE = 34; // Some regexps used in inline parser:\n\nvar ESCAPABLE = common.ESCAPABLE;\nvar ESCAPED_CHAR = '\\\\\\\\' + ESCAPABLE;\nvar ENTITY = common.ENTITY;\nvar reHtmlTag = common.reHtmlTag;\nvar rePunctuation = new RegExp(/[!\"#$%&'()*+,\\-./:;<=>?@\\[\\]^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/);\nvar reLinkTitle = new RegExp('^(?:\"(' + ESCAPED_CHAR + '|[^\"\\\\x00])*\"' + '|' + '\\'(' + ESCAPED_CHAR + '|[^\\'\\\\x00])*\\'' + '|' + '\\\\((' + ESCAPED_CHAR + '|[^)\\\\x00])*\\\\))');\nvar reLinkDestinationBraces = new RegExp('^(?:[<](?:[^ <>\\\\t\\\\n\\\\\\\\\\\\x00]' + '|' + ESCAPED_CHAR + '|' + '\\\\\\\\)*[>])');\nvar reEscapable = new RegExp('^' + ESCAPABLE);\nvar reEntityHere = new RegExp('^' + ENTITY, 'i');\nvar reTicks = /`+/;\nvar reTicksHere = /^`+/;\nvar reEllipses = /\\.\\.\\./g;\nvar reDash = /--+/g;\nvar reEmailAutolink = /^<([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;\nvar reAutolink = /^<[A-Za-z][A-Za-z0-9.+-]{1,31}:[^<>\\x00-\\x20]*>/i;\nvar reSpnl = /^ *(?:\\n *)?/;\nvar reWhitespaceChar = /^[ \\t\\n\\x0b\\x0c\\x0d]/;\nvar reWhitespace = /[ \\t\\n\\x0b\\x0c\\x0d]+/g;\nvar reUnicodeWhitespaceChar = /^\\s/;\nvar reFinalSpace = / *$/;\nvar reInitialSpace = /^ */;\nvar reSpaceAtEndOfLine = /^ *(?:\\n|$)/;\nvar reLinkLabel = new RegExp('^\\\\[(?:[^\\\\\\\\\\\\[\\\\]]|' + ESCAPED_CHAR + '|\\\\\\\\){0,1000}\\\\]'); // Matches a string of non-special characters.\n\nvar reMain = /^[^\\n`\\[\\]\\\\!<&*_'\"]+/m;\n\nvar text = function text(s) {\n  var node = new Node('text');\n  node._literal = s;\n  return node;\n}; // INLINE PARSER\n// These are methods of an InlineParser object, defined below.\n// An InlineParser keeps track of a subject (a string to be\n// parsed) and a position in that subject.\n// If re matches at current position in the subject, advance\n// position in subject and return the match; otherwise return null.\n\n\nvar match = function match(re) {\n  var m = re.exec(this.subject.slice(this.pos));\n\n  if (m === null) {\n    return null;\n  } else {\n    this.pos += m.index + m[0].length;\n    return m[0];\n  }\n}; // Returns the code for the character at the current subject position, or -1\n// there are no more characters.\n\n\nvar peek = function peek() {\n  if (this.pos < this.subject.length) {\n    return this.subject.charCodeAt(this.pos);\n  } else {\n    return -1;\n  }\n}; // Parse zero or more space characters, including at most one newline\n\n\nvar spnl = function spnl() {\n  this.match(reSpnl);\n  return true;\n}; // All of the parsers below try to match something at the current position\n// in the subject.  If they succeed in matching anything, they\n// return the inline matched, advancing the subject.\n// Attempt to parse backticks, adding either a backtick code span or a\n// literal sequence of backticks.\n\n\nvar parseBackticks = function parseBackticks(block) {\n  var ticks = this.match(reTicksHere);\n\n  if (ticks === null) {\n    return false;\n  }\n\n  var afterOpenTicks = this.pos;\n  var matched;\n  var node;\n\n  while ((matched = this.match(reTicks)) !== null) {\n    if (matched === ticks) {\n      node = new Node('code');\n      node._literal = this.subject.slice(afterOpenTicks, this.pos - ticks.length).trim().replace(reWhitespace, ' ');\n      block.appendChild(node);\n      return true;\n    }\n  } // If we got here, we didn't match a closing backtick sequence.\n\n\n  this.pos = afterOpenTicks;\n  block.appendChild(text(ticks));\n  return true;\n}; // Parse a backslash-escaped special character, adding either the escaped\n// character, a hard line break (if the backslash is followed by a newline),\n// or a literal backslash to the block's children.  Assumes current character\n// is a backslash.\n\n\nvar parseBackslash = function parseBackslash(block) {\n  var subj = this.subject;\n  var node;\n  this.pos += 1;\n\n  if (this.peek() === C_NEWLINE) {\n    this.pos += 1;\n    node = new Node('linebreak');\n    block.appendChild(node);\n  } else if (reEscapable.test(subj.charAt(this.pos))) {\n    block.appendChild(text(subj.charAt(this.pos)));\n    this.pos += 1;\n  } else {\n    block.appendChild(text('\\\\'));\n  }\n\n  return true;\n}; // Attempt to parse an autolink (URL or email in pointy brackets).\n\n\nvar parseAutolink = function parseAutolink(block) {\n  var m;\n  var dest;\n  var node;\n\n  if (m = this.match(reEmailAutolink)) {\n    dest = m.slice(1, m.length - 1);\n    node = new Node('link');\n    node._destination = normalizeURI('mailto:' + dest);\n    node._title = '';\n    node.appendChild(text(dest));\n    block.appendChild(node);\n    return true;\n  } else if (m = this.match(reAutolink)) {\n    dest = m.slice(1, m.length - 1);\n    node = new Node('link');\n    node._destination = normalizeURI(dest);\n    node._title = '';\n    node.appendChild(text(dest));\n    block.appendChild(node);\n    return true;\n  } else {\n    return false;\n  }\n}; // Attempt to parse a raw HTML tag.\n\n\nvar parseHtmlTag = function parseHtmlTag(block) {\n  var m = this.match(reHtmlTag);\n\n  if (m === null) {\n    return false;\n  } else {\n    var node = new Node('html_inline');\n    node._literal = m;\n    block.appendChild(node);\n    return true;\n  }\n}; // Scan a sequence of characters with code cc, and return information about\n// the number of delimiters and whether they are positioned such that\n// they can open and/or close emphasis or strong emphasis.  A utility\n// function for strong/emph parsing.\n\n\nvar scanDelims = function scanDelims(cc) {\n  var numdelims = 0;\n  var char_before, char_after, cc_after;\n  var startpos = this.pos;\n  var left_flanking, right_flanking, can_open, can_close;\n  var after_is_whitespace, after_is_punctuation, before_is_whitespace, before_is_punctuation;\n\n  if (cc === C_SINGLEQUOTE || cc === C_DOUBLEQUOTE) {\n    numdelims++;\n    this.pos++;\n  } else {\n    while (this.peek() === cc) {\n      numdelims++;\n      this.pos++;\n    }\n  }\n\n  if (numdelims === 0) {\n    return null;\n  }\n\n  char_before = startpos === 0 ? '\\n' : this.subject.charAt(startpos - 1);\n  cc_after = this.peek();\n\n  if (cc_after === -1) {\n    char_after = '\\n';\n  } else {\n    char_after = fromCodePoint(cc_after);\n  }\n\n  after_is_whitespace = reUnicodeWhitespaceChar.test(char_after);\n  after_is_punctuation = rePunctuation.test(char_after);\n  before_is_whitespace = reUnicodeWhitespaceChar.test(char_before);\n  before_is_punctuation = rePunctuation.test(char_before);\n  left_flanking = !after_is_whitespace && (!after_is_punctuation || before_is_whitespace || before_is_punctuation);\n  right_flanking = !before_is_whitespace && (!before_is_punctuation || after_is_whitespace || after_is_punctuation);\n\n  if (cc === C_UNDERSCORE) {\n    can_open = left_flanking && (!right_flanking || before_is_punctuation);\n    can_close = right_flanking && (!left_flanking || after_is_punctuation);\n  } else if (cc === C_SINGLEQUOTE || cc === C_DOUBLEQUOTE) {\n    can_open = left_flanking && !right_flanking;\n    can_close = right_flanking;\n  } else {\n    can_open = left_flanking;\n    can_close = right_flanking;\n  }\n\n  this.pos = startpos;\n  return {\n    numdelims: numdelims,\n    can_open: can_open,\n    can_close: can_close\n  };\n}; // Handle a delimiter marker for emphasis or a quote.\n\n\nvar handleDelim = function handleDelim(cc, block) {\n  var res = this.scanDelims(cc);\n\n  if (!res) {\n    return false;\n  }\n\n  var numdelims = res.numdelims;\n  var startpos = this.pos;\n  var contents;\n  this.pos += numdelims;\n\n  if (cc === C_SINGLEQUOTE) {\n    contents = \"\\u2019\";\n  } else if (cc === C_DOUBLEQUOTE) {\n    contents = \"\\u201C\";\n  } else {\n    contents = this.subject.slice(startpos, this.pos);\n  }\n\n  var node = text(contents);\n  block.appendChild(node); // Add entry to stack for this opener\n\n  this.delimiters = {\n    cc: cc,\n    numdelims: numdelims,\n    origdelims: numdelims,\n    node: node,\n    previous: this.delimiters,\n    next: null,\n    can_open: res.can_open,\n    can_close: res.can_close\n  };\n\n  if (this.delimiters.previous !== null) {\n    this.delimiters.previous.next = this.delimiters;\n  }\n\n  return true;\n};\n\nvar removeDelimiter = function removeDelimiter(delim) {\n  if (delim.previous !== null) {\n    delim.previous.next = delim.next;\n  }\n\n  if (delim.next === null) {\n    // top of stack\n    this.delimiters = delim.previous;\n  } else {\n    delim.next.previous = delim.previous;\n  }\n};\n\nvar removeDelimitersBetween = function removeDelimitersBetween(bottom, top) {\n  if (bottom.next !== top) {\n    bottom.next = top;\n    top.previous = bottom;\n  }\n};\n\nvar processEmphasis = function processEmphasis(stack_bottom) {\n  var opener, closer, old_closer;\n  var opener_inl, closer_inl;\n  var tempstack;\n  var use_delims;\n  var tmp, next;\n  var opener_found;\n  var openers_bottom = [];\n  var odd_match = false;\n  openers_bottom[C_UNDERSCORE] = stack_bottom;\n  openers_bottom[C_ASTERISK] = stack_bottom;\n  openers_bottom[C_SINGLEQUOTE] = stack_bottom;\n  openers_bottom[C_DOUBLEQUOTE] = stack_bottom; // find first closer above stack_bottom:\n\n  closer = this.delimiters;\n\n  while (closer !== null && closer.previous !== stack_bottom) {\n    closer = closer.previous;\n  } // move forward, looking for closers, and handling each\n\n\n  while (closer !== null) {\n    var closercc = closer.cc;\n\n    if (!closer.can_close) {\n      closer = closer.next;\n    } else {\n      // found emphasis closer. now look back for first matching opener:\n      opener = closer.previous;\n      opener_found = false;\n\n      while (opener !== null && opener !== stack_bottom && opener !== openers_bottom[closercc]) {\n        odd_match = (closer.can_open || opener.can_close) && (opener.origdelims + closer.origdelims) % 3 === 0;\n\n        if (opener.cc === closer.cc && opener.can_open && !odd_match) {\n          opener_found = true;\n          break;\n        }\n\n        opener = opener.previous;\n      }\n\n      old_closer = closer;\n\n      if (closercc === C_ASTERISK || closercc === C_UNDERSCORE) {\n        if (!opener_found) {\n          closer = closer.next;\n        } else {\n          // calculate actual number of delimiters used from closer\n          use_delims = closer.numdelims >= 2 && opener.numdelims >= 2 ? 2 : 1;\n          opener_inl = opener.node;\n          closer_inl = closer.node; // remove used delimiters from stack elts and inlines\n\n          opener.numdelims -= use_delims;\n          closer.numdelims -= use_delims;\n          opener_inl._literal = opener_inl._literal.slice(0, opener_inl._literal.length - use_delims);\n          closer_inl._literal = closer_inl._literal.slice(0, closer_inl._literal.length - use_delims); // build contents for new emph element\n\n          var emph = new Node(use_delims === 1 ? 'emph' : 'strong');\n          tmp = opener_inl._next;\n\n          while (tmp && tmp !== closer_inl) {\n            next = tmp._next;\n            tmp.unlink();\n            emph.appendChild(tmp);\n            tmp = next;\n          }\n\n          opener_inl.insertAfter(emph); // remove elts between opener and closer in delimiters stack\n\n          removeDelimitersBetween(opener, closer); // if opener has 0 delims, remove it and the inline\n\n          if (opener.numdelims === 0) {\n            opener_inl.unlink();\n            this.removeDelimiter(opener);\n          }\n\n          if (closer.numdelims === 0) {\n            closer_inl.unlink();\n            tempstack = closer.next;\n            this.removeDelimiter(closer);\n            closer = tempstack;\n          }\n        }\n      } else if (closercc === C_SINGLEQUOTE) {\n        closer.node._literal = \"\\u2019\";\n\n        if (opener_found) {\n          opener.node._literal = \"\\u2018\";\n        }\n\n        closer = closer.next;\n      } else if (closercc === C_DOUBLEQUOTE) {\n        closer.node._literal = \"\\u201D\";\n\n        if (opener_found) {\n          opener.node.literal = \"\\u201C\";\n        }\n\n        closer = closer.next;\n      }\n\n      if (!opener_found && !odd_match) {\n        // Set lower bound for future searches for openers:\n        // We don't do this with odd_match because a **\n        // that doesn't match an earlier * might turn into\n        // an opener, and the * might be matched by something\n        // else.\n        openers_bottom[closercc] = old_closer.previous;\n\n        if (!old_closer.can_open) {\n          // We can remove a closer that can't be an opener,\n          // once we've seen there's no matching opener:\n          this.removeDelimiter(old_closer);\n        }\n      }\n    }\n  } // remove all delimiters\n\n\n  while (this.delimiters !== null && this.delimiters !== stack_bottom) {\n    this.removeDelimiter(this.delimiters);\n  }\n}; // Attempt to parse link title (sans quotes), returning the string\n// or null if no match.\n\n\nvar parseLinkTitle = function parseLinkTitle() {\n  var title = this.match(reLinkTitle);\n\n  if (title === null) {\n    return null;\n  } else {\n    // chop off quotes from title and unescape:\n    return unescapeString(title.substr(1, title.length - 2));\n  }\n}; // Attempt to parse link destination, returning the string or\n// null if no match.\n\n\nvar parseLinkDestination = function parseLinkDestination() {\n  var res = this.match(reLinkDestinationBraces);\n\n  if (res === null) {\n    // TODO handrolled parser; res should be null or the string\n    var savepos = this.pos;\n    var openparens = 0;\n    var c;\n\n    while ((c = this.peek()) !== -1) {\n      if (c === C_BACKSLASH) {\n        this.pos += 1;\n\n        if (this.peek() !== -1) {\n          this.pos += 1;\n        }\n      } else if (c === C_OPEN_PAREN) {\n        this.pos += 1;\n        openparens += 1;\n      } else if (c === C_CLOSE_PAREN) {\n        if (openparens < 1) {\n          break;\n        } else {\n          this.pos += 1;\n          openparens -= 1;\n        }\n      } else if (reWhitespaceChar.exec(fromCodePoint(c)) !== null) {\n        break;\n      } else {\n        this.pos += 1;\n      }\n    }\n\n    res = this.subject.substr(savepos, this.pos - savepos);\n    return normalizeURI(unescapeString(res));\n  } else {\n    // chop off surrounding <..>:\n    return normalizeURI(unescapeString(res.substr(1, res.length - 2)));\n  }\n}; // Attempt to parse a link label, returning number of characters parsed.\n\n\nvar parseLinkLabel = function parseLinkLabel() {\n  var m = this.match(reLinkLabel); // Note:  our regex will allow something of form [..\\];\n  // we disallow it here rather than using lookahead in the regex:\n\n  if (m === null || m.length > 1001 || /[^\\\\]\\\\\\]$/.exec(m)) {\n    return 0;\n  } else {\n    return m.length;\n  }\n}; // Add open bracket to delimiter stack and add a text node to block's children.\n\n\nvar parseOpenBracket = function parseOpenBracket(block) {\n  var startpos = this.pos;\n  this.pos += 1;\n  var node = text('[');\n  block.appendChild(node); // Add entry to stack for this opener\n\n  this.addBracket(node, startpos, false);\n  return true;\n}; // IF next character is [, and ! delimiter to delimiter stack and\n// add a text node to block's children.  Otherwise just add a text node.\n\n\nvar parseBang = function parseBang(block) {\n  var startpos = this.pos;\n  this.pos += 1;\n\n  if (this.peek() === C_OPEN_BRACKET) {\n    this.pos += 1;\n    var node = text('![');\n    block.appendChild(node); // Add entry to stack for this opener\n\n    this.addBracket(node, startpos + 1, true);\n  } else {\n    block.appendChild(text('!'));\n  }\n\n  return true;\n}; // Try to match close bracket against an opening in the delimiter\n// stack.  Add either a link or image, or a plain [ character,\n// to block's children.  If there is a matching delimiter,\n// remove it from the delimiter stack.\n\n\nvar parseCloseBracket = function parseCloseBracket(block) {\n  var startpos;\n  var is_image;\n  var dest;\n  var title;\n  var matched = false;\n  var reflabel;\n  var opener;\n  this.pos += 1;\n  startpos = this.pos; // get last [ or ![\n\n  opener = this.brackets;\n\n  if (opener === null) {\n    // no matched opener, just return a literal\n    block.appendChild(text(']'));\n    return true;\n  }\n\n  if (!opener.active) {\n    // no matched opener, just return a literal\n    block.appendChild(text(']')); // take opener off brackets stack\n\n    this.removeBracket();\n    return true;\n  } // If we got here, open is a potential opener\n\n\n  is_image = opener.image; // Check to see if we have a link/image\n\n  var savepos = this.pos; // Inline link?\n\n  if (this.peek() === C_OPEN_PAREN) {\n    this.pos++;\n\n    if (this.spnl() && (dest = this.parseLinkDestination()) !== null && this.spnl() && ( // make sure there's a space before the title:\n    reWhitespaceChar.test(this.subject.charAt(this.pos - 1)) && (title = this.parseLinkTitle()) || true) && this.spnl() && this.peek() === C_CLOSE_PAREN) {\n      this.pos += 1;\n      matched = true;\n    } else {\n      this.pos = savepos;\n    }\n  }\n\n  if (!matched) {\n    // Next, see if there's a link label\n    var beforelabel = this.pos;\n    var n = this.parseLinkLabel();\n\n    if (n > 2) {\n      reflabel = this.subject.slice(beforelabel, beforelabel + n);\n    } else if (!opener.bracketAfter) {\n      // Empty or missing second label means to use the first label as the reference.\n      // The reference must not contain a bracket. If we know there's a bracket, we don't even bother checking it.\n      reflabel = this.subject.slice(opener.index, startpos);\n    }\n\n    if (n === 0) {\n      // If shortcut reference link, rewind before spaces we skipped.\n      this.pos = savepos;\n    }\n\n    if (reflabel) {\n      // lookup rawlabel in refmap\n      var link = this.refmap[normalizeReference(reflabel)];\n\n      if (link) {\n        dest = link.destination;\n        title = link.title;\n        matched = true;\n      }\n    }\n  }\n\n  if (matched) {\n    var node = new Node(is_image ? 'image' : 'link');\n    node._destination = dest;\n    node._title = title || '';\n    var tmp, next;\n    tmp = opener.node._next;\n\n    while (tmp) {\n      next = tmp._next;\n      tmp.unlink();\n      node.appendChild(tmp);\n      tmp = next;\n    }\n\n    block.appendChild(node);\n    this.processEmphasis(opener.previousDelimiter);\n    this.removeBracket();\n    opener.node.unlink(); // We remove this bracket and processEmphasis will remove later delimiters.\n    // Now, for a link, we also deactivate earlier link openers.\n    // (no links in links)\n\n    if (!is_image) {\n      opener = this.brackets;\n\n      while (opener !== null) {\n        if (!opener.image) {\n          opener.active = false; // deactivate this opener\n        }\n\n        opener = opener.previous;\n      }\n    }\n\n    return true;\n  } else {\n    // no match\n    this.removeBracket(); // remove this opener from stack\n\n    this.pos = startpos;\n    block.appendChild(text(']'));\n    return true;\n  }\n};\n\nvar addBracket = function addBracket(node, index, image) {\n  if (this.brackets !== null) {\n    this.brackets.bracketAfter = true;\n  }\n\n  this.brackets = {\n    node: node,\n    previous: this.brackets,\n    previousDelimiter: this.delimiters,\n    index: index,\n    image: image,\n    active: true\n  };\n};\n\nvar removeBracket = function removeBracket() {\n  this.brackets = this.brackets.previous;\n}; // Attempt to parse an entity.\n\n\nvar parseEntity = function parseEntity(block) {\n  var m;\n\n  if (m = this.match(reEntityHere)) {\n    block.appendChild(text(decodeHTML(m)));\n    return true;\n  } else {\n    return false;\n  }\n}; // Parse a run of ordinary characters, or a single character with\n// a special meaning in markdown, as a plain string.\n\n\nvar parseString = function parseString(block) {\n  var m;\n\n  if (m = this.match(reMain)) {\n    if (this.options.smart) {\n      block.appendChild(text(m.replace(reEllipses, \"\\u2026\").replace(reDash, function (chars) {\n        var enCount = 0;\n        var emCount = 0;\n\n        if (chars.length % 3 === 0) {\n          // If divisible by 3, use all em dashes\n          emCount = chars.length / 3;\n        } else if (chars.length % 2 === 0) {\n          // If divisible by 2, use all en dashes\n          enCount = chars.length / 2;\n        } else if (chars.length % 3 === 2) {\n          // If 2 extra dashes, use en dash for last 2; em dashes for rest\n          enCount = 1;\n          emCount = (chars.length - 2) / 3;\n        } else {\n          // Use en dashes for last 4 hyphens; em dashes for rest\n          enCount = 2;\n          emCount = (chars.length - 4) / 3;\n        }\n\n        return \"\\u2014\".repeat(emCount) + \"\\u2013\".repeat(enCount);\n      })));\n    } else {\n      block.appendChild(text(m));\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n}; // Parse a newline.  If it was preceded by two spaces, return a hard\n// line break; otherwise a soft line break.\n\n\nvar parseNewline = function parseNewline(block) {\n  this.pos += 1; // assume we're at a \\n\n  // check previous node for trailing spaces\n\n  var lastc = block._lastChild;\n\n  if (lastc && lastc.type === 'text' && lastc._literal[lastc._literal.length - 1] === ' ') {\n    var hardbreak = lastc._literal[lastc._literal.length - 2] === ' ';\n    lastc._literal = lastc._literal.replace(reFinalSpace, '');\n    block.appendChild(new Node(hardbreak ? 'linebreak' : 'softbreak'));\n  } else {\n    block.appendChild(new Node('softbreak'));\n  }\n\n  this.match(reInitialSpace); // gobble leading spaces in next line\n\n  return true;\n}; // Attempt to parse a link reference, modifying refmap.\n\n\nvar parseReference = function parseReference(s, refmap) {\n  this.subject = s;\n  this.pos = 0;\n  var rawlabel;\n  var dest;\n  var title;\n  var matchChars;\n  var startpos = this.pos; // label:\n\n  matchChars = this.parseLinkLabel();\n\n  if (matchChars === 0) {\n    return 0;\n  } else {\n    rawlabel = this.subject.substr(0, matchChars);\n  } // colon:\n\n\n  if (this.peek() === C_COLON) {\n    this.pos++;\n  } else {\n    this.pos = startpos;\n    return 0;\n  } //  link url\n\n\n  this.spnl();\n  dest = this.parseLinkDestination();\n\n  if (dest === null || dest.length === 0) {\n    this.pos = startpos;\n    return 0;\n  }\n\n  var beforetitle = this.pos;\n  this.spnl();\n  title = this.parseLinkTitle();\n\n  if (title === null) {\n    title = ''; // rewind before spaces\n\n    this.pos = beforetitle;\n  } // make sure we're at line end:\n\n\n  var atLineEnd = true;\n\n  if (this.match(reSpaceAtEndOfLine) === null) {\n    if (title === '') {\n      atLineEnd = false;\n    } else {\n      // the potential title we found is not at the line end,\n      // but it could still be a legal link reference if we\n      // discard the title\n      title = ''; // rewind before spaces\n\n      this.pos = beforetitle; // and instead check if the link URL is at the line end\n\n      atLineEnd = this.match(reSpaceAtEndOfLine) !== null;\n    }\n  }\n\n  if (!atLineEnd) {\n    this.pos = startpos;\n    return 0;\n  }\n\n  var normlabel = normalizeReference(rawlabel);\n\n  if (normlabel === '') {\n    // label must contain non-whitespace characters\n    this.pos = startpos;\n    return 0;\n  }\n\n  if (!refmap[normlabel]) {\n    refmap[normlabel] = {\n      destination: dest,\n      title: title\n    };\n  }\n\n  return this.pos - startpos;\n}; // Parse the next inline element in subject, advancing subject position.\n// On success, add the result to block's children and return true.\n// On failure, return false.\n\n\nvar parseInline = function parseInline(block) {\n  var res = false;\n  var c = this.peek();\n\n  if (c === -1) {\n    return false;\n  }\n\n  switch (c) {\n    case C_NEWLINE:\n      res = this.parseNewline(block);\n      break;\n\n    case C_BACKSLASH:\n      res = this.parseBackslash(block);\n      break;\n\n    case C_BACKTICK:\n      res = this.parseBackticks(block);\n      break;\n\n    case C_ASTERISK:\n    case C_UNDERSCORE:\n      res = this.handleDelim(c, block);\n      break;\n\n    case C_SINGLEQUOTE:\n    case C_DOUBLEQUOTE:\n      res = this.options.smart && this.handleDelim(c, block);\n      break;\n\n    case C_OPEN_BRACKET:\n      res = this.parseOpenBracket(block);\n      break;\n\n    case C_BANG:\n      res = this.parseBang(block);\n      break;\n\n    case C_CLOSE_BRACKET:\n      res = this.parseCloseBracket(block);\n      break;\n\n    case C_LESSTHAN:\n      res = this.parseAutolink(block) || this.parseHtmlTag(block);\n      break;\n\n    case C_AMPERSAND:\n      res = this.parseEntity(block);\n      break;\n\n    default:\n      res = this.parseString(block);\n      break;\n  }\n\n  if (!res) {\n    this.pos += 1;\n    block.appendChild(text(fromCodePoint(c)));\n  }\n\n  return true;\n}; // Parse string content in block into inline children,\n// using refmap to resolve references.\n\n\nvar parseInlines = function parseInlines(block) {\n  this.subject = block._string_content.trim();\n  this.pos = 0;\n  this.delimiters = null;\n  this.brackets = null;\n\n  while (this.parseInline(block)) {}\n\n  block._string_content = null; // allow raw string to be garbage collected\n\n  this.processEmphasis(null);\n}; // The InlineParser object.\n\n\nfunction InlineParser(options) {\n  return {\n    subject: '',\n    delimiters: null,\n    // used by handleDelim method\n    brackets: null,\n    pos: 0,\n    refmap: {},\n    match: match,\n    peek: peek,\n    spnl: spnl,\n    parseBackticks: parseBackticks,\n    parseBackslash: parseBackslash,\n    parseAutolink: parseAutolink,\n    parseHtmlTag: parseHtmlTag,\n    scanDelims: scanDelims,\n    handleDelim: handleDelim,\n    parseLinkTitle: parseLinkTitle,\n    parseLinkDestination: parseLinkDestination,\n    parseLinkLabel: parseLinkLabel,\n    parseOpenBracket: parseOpenBracket,\n    parseBang: parseBang,\n    parseCloseBracket: parseCloseBracket,\n    addBracket: addBracket,\n    removeBracket: removeBracket,\n    parseEntity: parseEntity,\n    parseString: parseString,\n    parseNewline: parseNewline,\n    parseReference: parseReference,\n    parseInline: parseInline,\n    processEmphasis: processEmphasis,\n    removeDelimiter: removeDelimiter,\n    options: options || {},\n    parse: parseInlines\n  };\n}\n\nmodule.exports = InlineParser;","map":null,"metadata":{},"sourceType":"script"}